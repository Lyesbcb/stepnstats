{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StringFormat } from \"../Clipboard.types\";\nimport { ClipboardUnavailableException, CopyFailureException, NoPermissionException, PasteFailureException } from \"./Exceptions\";\nimport { base64toBlob, blobToBase64Async, findHtmlInClipboardAsync, findImageInClipboardAsync, getImageSizeFromBlobAsync, htmlToPlainText, isClipboardPermissionDeniedAsync } from \"./Utils\";\nexport default {\n  get name() {\n    return 'ExpoClipboard';\n  },\n\n  getStringAsync: function getStringAsync(options) {\n    return function _callee() {\n      var clipboardItems, blob, text, _clipboardItems, _blob, blobText;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (navigator.clipboard) {\n                _context.next = 2;\n                break;\n              }\n\n              throw new ClipboardUnavailableException();\n\n            case 2:\n              _context.prev = 2;\n              _context.t0 = options.preferredFormat;\n              _context.next = _context.t0 === StringFormat.HTML ? 6 : 19;\n              break;\n\n            case 6:\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(navigator.clipboard.read());\n\n            case 8:\n              clipboardItems = _context.sent;\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(findHtmlInClipboardAsync(clipboardItems));\n\n            case 11:\n              blob = _context.sent;\n\n              if (blob) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 15;\n              return _regeneratorRuntime.awrap(navigator.clipboard.readText());\n\n            case 15:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 16:\n              _context.next = 18;\n              return _regeneratorRuntime.awrap(new Response(blob).text());\n\n            case 18:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 19:\n              _context.next = 21;\n              return _regeneratorRuntime.awrap(navigator.clipboard.readText());\n\n            case 21:\n              text = _context.sent;\n\n              if (!(!text || text === '')) {\n                _context.next = 33;\n                break;\n              }\n\n              _context.next = 25;\n              return _regeneratorRuntime.awrap(navigator.clipboard.read());\n\n            case 25:\n              _clipboardItems = _context.sent;\n              _context.next = 28;\n              return _regeneratorRuntime.awrap(findHtmlInClipboardAsync(_clipboardItems));\n\n            case 28:\n              _blob = _context.sent;\n              _context.next = 31;\n              return _regeneratorRuntime.awrap(_blob == null ? void 0 : _blob.text());\n\n            case 31:\n              blobText = _context.sent;\n              text = htmlToPlainText(blobText != null ? blobText : '');\n\n            case 33:\n              return _context.abrupt(\"return\", text);\n\n            case 34:\n              _context.next = 52;\n              break;\n\n            case 36:\n              _context.prev = 36;\n              _context.t1 = _context[\"catch\"](2);\n              _context.t2 = _context.t1.name === 'NotAllowedError';\n\n              if (_context.t2) {\n                _context.next = 43;\n                break;\n              }\n\n              _context.next = 42;\n              return _regeneratorRuntime.awrap(isClipboardPermissionDeniedAsync());\n\n            case 42:\n              _context.t2 = _context.sent;\n\n            case 43:\n              if (!_context.t2) {\n                _context.next = 45;\n                break;\n              }\n\n              throw new NoPermissionException();\n\n            case 45:\n              _context.prev = 45;\n              return _context.abrupt(\"return\", window.clipboardData.getData('Text'));\n\n            case 49:\n              _context.prev = 49;\n              _context.t3 = _context[\"catch\"](45);\n              return _context.abrupt(\"return\", Promise.reject(new Error('Unable to retrieve item from clipboard')));\n\n            case 52:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 36], [45, 49]], Promise);\n    }();\n  },\n  setString: function setString(text) {\n    var textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n\n    try {\n      document.execCommand('copy');\n      return true;\n    } catch (_unused2) {\n      return false;\n    } finally {\n      document.body.removeChild(textField);\n    }\n  },\n  setStringAsync: function setStringAsync(text, options) {\n    var _this = this;\n\n    return function _callee2() {\n      var clipboardItemInput;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.t0 = options.inputFormat;\n              _context2.next = _context2.t0 === StringFormat.HTML ? 3 : 22;\n              break;\n\n            case 3:\n              if (navigator.clipboard) {\n                _context2.next = 5;\n                break;\n              }\n\n              throw new ClipboardUnavailableException();\n\n            case 5:\n              _context2.prev = 5;\n              clipboardItemInput = createHtmlClipboardItem(text);\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(navigator.clipboard.write([clipboardItemInput]));\n\n            case 9:\n              return _context2.abrupt(\"return\", true);\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t1 = _context2[\"catch\"](5);\n              _context2.t2 = _context2.t1.name === 'NotAllowedError';\n\n              if (_context2.t2) {\n                _context2.next = 19;\n                break;\n              }\n\n              _context2.next = 18;\n              return _regeneratorRuntime.awrap(isClipboardPermissionDeniedAsync());\n\n            case 18:\n              _context2.t2 = _context2.sent;\n\n            case 19:\n              if (!_context2.t2) {\n                _context2.next = 21;\n                break;\n              }\n\n              throw new NoPermissionException();\n\n            case 21:\n              throw new CopyFailureException(_context2.t1.message);\n\n            case 22:\n              return _context2.abrupt(\"return\", _this.setString(text));\n\n            case 23:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[5, 12]], Promise);\n    }();\n  },\n  hasStringAsync: function hasStringAsync() {\n    return function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(clipboardHasTypesAsync(['text/plain', 'text/html']));\n\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getImageAsync: function getImageAsync(_options) {\n    return function _callee4() {\n      var clipboardItems, blob, _await$Promise$all, _await$Promise$all2, data, size;\n\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (navigator.clipboard) {\n                _context4.next = 2;\n                break;\n              }\n\n              throw new ClipboardUnavailableException();\n\n            case 2:\n              _context4.prev = 2;\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(navigator.clipboard.read());\n\n            case 5:\n              clipboardItems = _context4.sent;\n              _context4.next = 8;\n              return _regeneratorRuntime.awrap(findImageInClipboardAsync(clipboardItems));\n\n            case 8:\n              blob = _context4.sent;\n\n              if (blob) {\n                _context4.next = 11;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", null);\n\n            case 11:\n              _context4.next = 13;\n              return _regeneratorRuntime.awrap(Promise.all([blobToBase64Async(blob), getImageSizeFromBlobAsync(blob)]));\n\n            case 13:\n              _await$Promise$all = _context4.sent;\n              _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n              data = _await$Promise$all2[0];\n              size = _await$Promise$all2[1];\n              return _context4.abrupt(\"return\", {\n                data: data,\n                size: size\n              });\n\n            case 20:\n              _context4.prev = 20;\n              _context4.t0 = _context4[\"catch\"](2);\n              _context4.t1 = _context4.t0.name === 'NotAllowedError';\n\n              if (_context4.t1) {\n                _context4.next = 27;\n                break;\n              }\n\n              _context4.next = 26;\n              return _regeneratorRuntime.awrap(isClipboardPermissionDeniedAsync());\n\n            case 26:\n              _context4.t1 = _context4.sent;\n\n            case 27:\n              if (!_context4.t1) {\n                _context4.next = 29;\n                break;\n              }\n\n              throw new NoPermissionException();\n\n            case 29:\n              throw new PasteFailureException(_context4.t0.message);\n\n            case 30:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, [[2, 20]], Promise);\n    }();\n  },\n  setImageAsync: function setImageAsync(base64image) {\n    return function _callee5() {\n      var blob;\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (navigator.clipboard) {\n                _context5.next = 2;\n                break;\n              }\n\n              throw new ClipboardUnavailableException();\n\n            case 2:\n              _context5.prev = 2;\n              blob = base64toBlob(base64image, 'image/png');\n              _context5.next = 6;\n              return _regeneratorRuntime.awrap(navigator.clipboard.write([new ClipboardItem(_defineProperty({}, blob.type, blob))]));\n\n            case 6:\n              _context5.next = 11;\n              break;\n\n            case 8:\n              _context5.prev = 8;\n              _context5.t0 = _context5[\"catch\"](2);\n              throw new CopyFailureException(_context5.t0.message);\n\n            case 11:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, [[2, 8]], Promise);\n    }();\n  },\n  hasImageAsync: function hasImageAsync() {\n    return function _callee6() {\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _regeneratorRuntime.awrap(clipboardHasTypesAsync(['image/png', 'image/jpeg']));\n\n            case 2:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  addClipboardListener: function addClipboardListener() {},\n  removeClipboardListener: function removeClipboardListener() {}\n};\n\nfunction clipboardHasTypesAsync(types) {\n  var clipboardItems;\n  return _regeneratorRuntime.async(function clipboardHasTypesAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (navigator.clipboard) {\n            _context7.next = 2;\n            break;\n          }\n\n          throw new ClipboardUnavailableException();\n\n        case 2:\n          _context7.prev = 2;\n          _context7.next = 5;\n          return _regeneratorRuntime.awrap(navigator.clipboard.read());\n\n        case 5:\n          clipboardItems = _context7.sent;\n          return _context7.abrupt(\"return\", clipboardItems.flatMap(function (item) {\n            return item.types;\n          }).some(function (type) {\n            return types.includes(type);\n          }));\n\n        case 9:\n          _context7.prev = 9;\n          _context7.t0 = _context7[\"catch\"](2);\n          _context7.t1 = _context7.t0.name === 'NotAllowedError';\n\n          if (_context7.t1) {\n            _context7.next = 16;\n            break;\n          }\n\n          _context7.next = 15;\n          return _regeneratorRuntime.awrap(isClipboardPermissionDeniedAsync());\n\n        case 15:\n          _context7.t1 = _context7.sent;\n\n        case 16:\n          if (!_context7.t1) {\n            _context7.next = 18;\n            break;\n          }\n\n          throw new NoPermissionException();\n\n        case 18:\n          throw _context7.t0;\n\n        case 19:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, [[2, 9]], Promise);\n}\n\nfunction createHtmlClipboardItem(htmlString) {\n  return new ClipboardItem({\n    'text/html': new Blob([htmlString], {\n      type: 'text/html'\n    }),\n    'text/plain': new Blob([htmlToPlainText(htmlString)], {\n      type: 'text/plain'\n    })\n  });\n}","map":{"version":3,"sources":["../../src/web/ClipboardModule.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ClipboardImage,\n  GetImageOptions,\n  GetStringOptions,\n  SetStringOptions,\n  StringFormat,\n} from '../Clipboard.types';\nimport {\n  ClipboardUnavailableException,\n  CopyFailureException,\n  NoPermissionException,\n  PasteFailureException,\n} from './Exceptions';\nimport {\n  base64toBlob,\n  blobToBase64Async,\n  findHtmlInClipboardAsync,\n  findImageInClipboardAsync,\n  getImageSizeFromBlobAsync,\n  htmlToPlainText,\n  isClipboardPermissionDeniedAsync,\n} from './Utils';\n\nexport default {\n  get name(): string {\n    return 'ExpoClipboard';\n  },\n  async getStringAsync(options: GetStringOptions): Promise<string> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      switch (options.preferredFormat) {\n        case StringFormat.HTML: {\n          // Try reading HTML first\n          const clipboardItems = await navigator.clipboard.read();\n          const blob = await findHtmlInClipboardAsync(clipboardItems);\n          if (!blob) {\n            // Fall back to plain text\n            return await navigator.clipboard.readText();\n          }\n          return await new Response(blob).text();\n        }\n        default: {\n          let text = await navigator.clipboard.readText();\n          if (!text || text === '') {\n            // If there's no direct plain text, try reading HTML\n            const clipboardItems = await navigator.clipboard.read();\n            const blob = await findHtmlInClipboardAsync(clipboardItems);\n            const blobText = await blob?.text();\n            text = htmlToPlainText(blobText ?? '');\n          }\n          return text;\n        }\n      }\n    } catch (e) {\n      // it might fail, because user denied permission\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n\n      try {\n        // Internet Explorer\n        // @ts-ignore\n        return window.clipboardData.getData('Text');\n      } catch {\n        return Promise.reject(new Error('Unable to retrieve item from clipboard'));\n      }\n    }\n  },\n  // TODO: (barthap) The `setString` was deprecated in SDK 45. Remove this function in a few SDK cycles.\n  setString(text: string): boolean {\n    const textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n    try {\n      document.execCommand('copy');\n      return true;\n    } catch {\n      return false;\n    } finally {\n      document.body.removeChild(textField);\n    }\n  },\n  async setStringAsync(text: string, options: SetStringOptions): Promise<boolean> {\n    switch (options.inputFormat) {\n      case StringFormat.HTML: {\n        if (!navigator.clipboard) {\n          throw new ClipboardUnavailableException();\n        }\n\n        try {\n          const clipboardItemInput = createHtmlClipboardItem(text);\n          await navigator.clipboard.write([clipboardItemInput]);\n          return true;\n        } catch (e) {\n          // it might fail, because user denied permission\n          if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n            throw new NoPermissionException();\n          }\n          throw new CopyFailureException(e.message);\n        }\n      }\n      default:\n        return this.setString(text);\n    }\n  },\n  async hasStringAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['text/plain', 'text/html']);\n  },\n  async getImageAsync(_options: GetImageOptions): Promise<ClipboardImage | null> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      const clipboardItems = await navigator.clipboard.read();\n      const blob = await findImageInClipboardAsync(clipboardItems);\n      if (!blob) {\n        return null;\n      }\n\n      const [data, size] = await Promise.all([\n        blobToBase64Async(blob),\n        getImageSizeFromBlobAsync(blob),\n      ]);\n\n      return { data, size };\n    } catch (e) {\n      // it might fail, because user denied permission\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n      throw new PasteFailureException(e.message);\n    }\n  },\n  async setImageAsync(base64image: string): Promise<void> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      // we set it always to `image/png` because it's the only format supported by the clipboard\n      // but it seems to work even when provided jpeg data\n      const blob = base64toBlob(base64image, 'image/png');\n      await navigator.clipboard.write([\n        // I cannot use `@ts-expect-error` here because some environments consider this correct:\n        // expo-module build - OK,\n        // et gdad - error\n        // Fixed in TS >4.4.3: https://github.com/microsoft/TypeScript/issues/46116#issuecomment-932443415\n        // @ts-ignore Some tools seem to use TS <= 4.4.3\n        new ClipboardItem({\n          [blob.type]: blob,\n        } as Record<string, ClipboardItemDataType>),\n      ]);\n    } catch (err: any) {\n      throw new CopyFailureException(err.message);\n    }\n  },\n  async hasImageAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['image/png', 'image/jpeg']);\n  },\n  addClipboardListener(): void {},\n  removeClipboardListener(): void {},\n};\n\n/**\n * Resolves to true if clipboard has one of provided {@link types}.\n * @throws `ClipboardUnavailableException` if AsyncClipboard API is not available\n * @throws `NoPermissionException` if user denied permission\n */\nasync function clipboardHasTypesAsync(types: string[]): Promise<boolean> {\n  if (!navigator.clipboard) {\n    throw new ClipboardUnavailableException();\n  }\n\n  try {\n    const clipboardItems = await navigator.clipboard.read();\n    return clipboardItems.flatMap((item) => item.types).some((type) => types.includes(type));\n  } catch (e) {\n    // it might fail, because user denied permission\n    if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n      throw new NoPermissionException();\n    }\n    throw e;\n  }\n}\n\nfunction createHtmlClipboardItem(htmlString: string): ClipboardItem {\n  return new ClipboardItem({\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/html': new Blob([htmlString], { type: 'text/html' }),\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/plain': new Blob([htmlToPlainText(htmlString)], { type: 'text/plain' }),\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}